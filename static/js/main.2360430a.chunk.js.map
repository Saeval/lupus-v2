{"version":3,"sources":["Components/PlayerSelectionScreen.jsx","Components/BackToSelectionButton.jsx","Components/Roles.jsx","Components/PlayerNamesScreen.jsx","Components/ErrorScreen.jsx","Components/Header.jsx","Components/NightWolvesPhaseScreen.jsx","Components/DayPhaseScreen.jsx","Components/EndGame.jsx","Components/NightSpecialCharacterScreen.jsx","Components/Phases.jsx","Components/NightSeerScreen.jsx","Components/App.jsx","scripts/registerServiceWorker.js","index.js"],"names":["PlayerSelectionScreen","players","options","push","value","i","className","id","onChange","this","props","handleNumberOfPlayersSelection","defaultValue","selectedNumberOfPlayers","buildOptions","maxPlayers","onClick","handleNumberOfPlayersConfirm","Component","BackToSelectionButton","goBack","commonerRole","wolfRole","guardRole","whoreRole","seerRole","possessedRole","Roles","state","roles","find","role","roleName","length","toLowerCase","numberOfPlayers","Math","floor","getMaxNumberOfWolves","getMaxNumberOfGuards","getMaxNumberOfWhores","getMaxNumberOfPossessed","getMaxNumberOfSeers","PlayerNamesScreen","playersNames","getPlayersNames","playersRoles","getPlayersRoles","playerNames","type","onBlur","handlePlayerNameChange","supportedRoles","getAllRoles","playerRoles","undefined","handlePlayerRoleSelection","map","handlePlayerDataConfirm","setRandomRoles","ErrorScreen","errorMessage","Header","title","NightWolvesPhaseScreen","wolves","getAliveWolves","commoners","getAliveCommoners","alivePlayers","getRoleByName","includes","filter","player","confirmKillSelection","name","killSomeoneText","join","getCommonersSelect","handleWolvesChoice","style","marginLeft","width","DayPhaseScreen","commonersVictim","messageFirstPart","setMessageFirstPart","messageSecondPart","setMessageSecondPart","numberOfVictims","wolvesKills","gameEnded","handleCommonersChoice","getAlivePlayersSelect","EndGame","coloredListOfPlayers","allPlayers","playerName","color","getWolfRole","textClass","Fragment","message","NightSpecialCharacterScreen","specialCharacterName","getName","specialRole","handleSelection","isPlaying","confirmChoice","character","buttonStyle","isSpecialCharacterAlive","aliveMessage","getPlayersSelect","Phases","phases","phase","NightSeerScreen","hasYetToChoose","choice","isAlive","getSeerRole","continueAction","isConfirmChoiceButtonDisabled","supplementMessage","Game","currentPhase","error","commonersKill","guardedPlayer","escortedPlayer","winnerMessage","seerChoice","seerMessage","setUpHandlers","resetError","bind","goToNextPhase","goToPreviousPhase","handleGuardSelection","confirmGuardChoice","handleWhoreSelection","confirmWhoreChoice","handleSeerSelection","confirmSeerChoice","returnValue","getPlayerSelectionPhase","getPlayerDataPhase","getGuardPhase","isRolePlaying","getGuardRole","getWhorePhase","getWhoreRole","getSeerPhase","getWolvesPhase","getDayPhase","getEndGamePhase","guardPhase","setState","getNumberOfPlayersWithRole","event","target","initializePlayerFields","setErrorMessage","newRoles","selectedRole","split","maxNumberOfWolves","maxNumberOfGuard","maxNumberOfWhores","maxNumberOfSeers","maxNumberOfCommoners","getMaxNumberOfCommoners","maxNumberOfPossessed","removeDefaultCommonerRole","remainingRolesToAssign","currentNumberOfWolves","currentNumberOfGuards","currentNumberOfWhores","currentNumberOfCommoners","getDefaultRole","currentNumberOfSeers","currentNumberOfPossessed","getPossessedRole","addRoles","random","roleToGet","currentRoles","numberOfTimesToAdd","newNames","dataAreValid","isNumberOfWolvesAcceptable","allPlayersHaveNames","allNamesAreUnique","uniqueRolesAreReallyUnique","newVictims","isUndefinedOrEmpty","victims","areVictimsValid","doVictimsDie","removeFromAlivePlayers","winners","goToEndGameScreen","victim","tempNames","tempRoles","resetDataForPlayersNonExistentAnymore","pop","names","item","guards","getAlivePlayersByRole","whores","seers","whore","killWhoreIfSheSleptWithWolf","killAlsoWhoreIfEscortedPlayerIsBetweenVictims","wolvesHaveWon","commonersHaveWon","setWinnerMessage","chosenIsWolf","getWolvesSide","getCommonersSide","result","concat","goodGuys","arrayAreEqual","winner","a1","a2","every","element","newPlayerRoles","object","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2360430a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PlayerSelectionScreen extends Component {\n    buildOptions(players) {\n        if (players < 6)\n            return null;\n\n        let options = [];\n        options.push(<option key={-1} value={-1}>--</option>);\n        for (let i = 6; i <= players; i++) {\n            options.push(\n                <option key={i} value={i}>\n                    {i}\n                </option>\n            )\n        }\n\n        return options;\n    }\n\n    render() {\n        return (\n            <div className=\"col-xs-12\">\n                <div className=\"big-text col-xs-3 col-xs-offset-4\">\n                    How many players are there?\n                    <select\n                        id=\"numberOfPlayers\"\n                        className=\"left-margin numeric-select-width\"\n                        onChange={this.props.handleNumberOfPlayersSelection}\n                        defaultValue={this.props.selectedNumberOfPlayers > 0 ? this.props.selectedNumberOfPlayers : -1}>\n                        {this.buildOptions(this.props.maxPlayers)}\n                    </select>\n                </div>\n                <button className=\"btn btn-primary col-xs-1\" onClick={this.props.handleNumberOfPlayersConfirm}>Confirm</button>\n            </div>\n        )\n    }\n}\n\nexport default PlayerSelectionScreen;\n","import React, { Component } from 'react';\n\nclass BackToSelectionButton extends Component {\n    render() {\n        return(\n            <button className={this.props.className} onClick={this.props.goBack}>Go back</button>\n        );\n    }\n}\n\nexport default BackToSelectionButton;","import React, { Component } from 'react';\n\nconst commonerRole = 'Commoner';\nconst wolfRole = 'Wolf';\nconst guardRole = 'Guard';\nconst whoreRole = 'Whore';\nconst seerRole = 'Seer';\nconst possessedRole = 'Possessed';\n\nclass Roles extends Component {\n    constructor(){\n        super();\n        this.state = {\n            roles: [\n                commonerRole,\n                wolfRole,\n                guardRole,\n                whoreRole,\n                seerRole,\n                possessedRole\n            ]\n        };\n    }\n\n    getAllRoles() {\n        return this.state.roles;\n    }\n\n    getDefaultRole() {\n        return this.state.roles.find(role => role === commonerRole);\n    }\n\n    getWolfRole() {\n        return this.state.roles.find(role => role === wolfRole);\n    }\n\n    getGuardRole() {\n        return this.state.roles.find(role => role === guardRole);\n    }\n\n    getWhoreRole() {\n        return this.state.roles.find(role => role === whoreRole);\n    }\n\n    getSeerRole() {\n        return this.state.roles.find(role => role === seerRole);\n    }\n\n    getPossessedRole() {\n        return this.state.roles.find(role => role === possessedRole);\n    }\n\n    getRoleByName(roleName){\n        const roles = this.state.roles;\n        for(let i = 0; i < roles.length; i++)\n            if (this.state.roles[i].toLowerCase() === roleName.toLowerCase()) return this.state.roles[i];\n\n      return 'Role not existing';\n    }\n\n    getMaxNumberOfWolves(numberOfPlayers) {\n        return numberOfPlayers === 6 ? 1 : Math.floor(numberOfPlayers / 3);\n    }\n\n    getMaxNumberOfGuards(numberOfPlayers) {\n        return numberOfPlayers > 5 ? 1 : 0;\n    }\n\n    getMaxNumberOfWhores(numberOfPlayers) {\n        return numberOfPlayers > 6 ? 1 : 0;\n    }\n\n    getMaxNumberOfSeers(numberOfPlayers) {\n        return numberOfPlayers > 7 ? 1 : 0;\n    }\n\n    getMaxNumberOfPossessed(numberOfPlayers) {\n        return numberOfPlayers > 8 ? 1 : 0;\n    }\n\n    getMaxNumberOfCommoners(numberOfPlayers) {\n        return numberOfPlayers - this.getMaxNumberOfWolves(numberOfPlayers)\n                               - this.getMaxNumberOfGuards(numberOfPlayers)\n                               - this.getMaxNumberOfWhores(numberOfPlayers)\n                               - this.getMaxNumberOfPossessed(numberOfPlayers)\n                               - this.getMaxNumberOfSeers(numberOfPlayers);\n    }\n}\n\nexport default Roles;\n","import React, { Component } from 'react';\nimport BackToSelectionButton from './BackToSelectionButton.jsx';\nimport Roles from \"./Roles\";\n\nclass PlayerNamesScreen extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            playersNames: this.getPlayersNames(),\n            playersRoles: this.getPlayersRoles()\n        };\n    }\n\n    getPlayersNames() {\n        let playerNames = [];\n\n        for (let i = 0; i < this.props.selectedNumberOfPlayers; i++) {\n            playerNames[i] =\n                <div key={\"label-input-container-\" + i}>\n                    <label key={\"label-\" + i}>Player name {i + 1}</label>\n                    <input type=\"text\"\n                           key={i}\n                           id={\"name-\" + i}\n                           className=\"left-margin field\"\n                           onBlur={this.props.handlePlayerNameChange}\n                           defaultValue={this.props.playersNames !== [] ? this.props.playerNames[i] : \"\"}\n                    />\n                </div>\n        }\n\n        return playerNames;\n    }\n\n    getPlayersRoles(){\n        const supportedRoles = new Roles().getAllRoles();\n\n        let playerRoles = [];\n\n        for(let i = 0; i < this.props.selectedNumberOfPlayers; i++) {\n            let defaultValue = this.props.playerRoles !== undefined ? this.props.playerRoles[i] : supportedRoles[0];\n\n            playerRoles[i] =\n                <div key={`select-container-${i}`}>\n                    <select key={`${defaultValue}`}\n                            id={`role-${i}`}\n                            className=\"field text-select-width\"\n                            onChange={this.props.handlePlayerRoleSelection}\n                            defaultValue={defaultValue}\n                    >\n                        {supportedRoles.map(role => <option key={`role-${role}-${i}`} value={role}>{role}</option>)}\n                    </select>\n                </div>;\n        }\n\n        return playerRoles;\n    }\n\n    render() {\n        return(\n            <div className=\"col-xs-12\">\n                <div className=\"col-xs-4\" id=\"playersNamesDiv\">\n                    {this.state.playersNames}\n                </div>\n                <div className=\"col-xs-3 wide-right-margin\">\n                    {/*\n                        For some reason, displaying this.state.playersRoles\n                        doesn't update the labels if the setRandomRoles button is pressed\n                    */}\n                    {this.getPlayersRoles()}\n                </div>\n                <div className=\"col-xs-4 col-xs-offset-2\">\n                    <button className=\"col-xs-5 btn btn-primary top-margin right-margin confirm-players-button\"\n                            onClick={this.props.handlePlayerDataConfirm}>\n                        Confirm\n                    </button>\n                </div>\n                <div className=\"col-xs-4\">\n                    <BackToSelectionButton className=\"col-xs-5 btn btn-warning top-margin go-back-players-button\"\n                                           goBack={this.props.goBack}/>\n                    <button className=\"col-xs-5 btn btn-info top-margin go-back-players-button\"\n                            onClick={this.props.setRandomRoles}>\n                        Random roles\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PlayerNamesScreen;\n","import React, { Component } from 'react';\nimport BackToSelectionButton from './BackToSelectionButton.jsx';\n\nclass ErrorScreen extends Component {\n\n    render() {\n        return (\n            <div className=\"col-xs-12\">\n                <div className=\"big-text text-danger col-xs-3 col-xs-offset-4\">{this.props.errorMessage}</div>\n                <BackToSelectionButton className=\"btn btn-danger col-xs-1\" goBack={this.props.goBack}/>\n            </div>\n        );\n    }\n\n}\n\nexport default ErrorScreen;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron text-center title top-margin\">{this.props.title}</div>\n        )\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Roles from \"./Roles\";\n\nclass NightWolvesPhaseScreen extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            wolves: this.getAliveWolves(),\n            commoners: this.getAliveCommoners()\n        };\n    }\n\n    getAliveWolves(){\n        let wolves = [];\n        const alivePlayers = this.props.alivePlayers;\n        const playerNames = this.props.playerNames;\n        const wolfRole = new Roles().getRoleByName('wolf');\n\n        for(let i = 0; i < this.props.playerRoles.length; i++)\n            if (this.props.playerRoles[i] === wolfRole && alivePlayers.includes(playerNames[i]))\n                wolves.push(playerNames[i]);\n\n        //console.log(`Set wolves to: ${wolves}`);\n\n        return wolves;\n    }\n\n    getAliveCommoners(){\n        let wolves = this.getAliveWolves();\n        //console.log(`Set commoners to: ${commoners}`);\n\n        return this.props.alivePlayers.filter(player => !wolves.includes(player));\n    }\n\n    getCommonersSelect(){\n        let commoners = this.state.commoners;\n\n        let result =\n            <select className='field text-select-width' onChange={this.props.confirmKillSelection}>\n                <option key={'-1'} value=''>--</option>\n                {commoners.map(name => <option key={name} value={name}>{name}</option>)}\n            </select>;\n\n        return result;\n    }\n\n    render() {\n        let wolves = this.state.wolves;\n        let killSomeoneText = wolves.length === 1 ?\n                            `Wolf ${wolves[0]}, pick someone to kill` :\n                            `Wolves ${wolves.join(', ')}, pick someone to kill`;\n        return (\n          <div className=\"col-xs-12 col-xs-offset-3\">\n              <div className=\"col-xs-4\">\n                  {killSomeoneText}\n              </div>\n              <div className=\"col-xs-5\">\n                  {this.getCommonersSelect()}\n              </div>\n              <div className=\"col-xs-2 col-xs-offset-2\">\n                  <button className=\"col-xs-5 btn btn-primary top-margin right-margin\"\n                          onClick={this.props.handleWolvesChoice}\n                          style={{marginLeft: '22em', width: '80%'}}>\n                      Confirm\n                  </button>\n              </div>\n          </div>\n        )\n    }\n}\n\nexport default NightWolvesPhaseScreen;\n","import React, { Component } from 'react';\n\nclass DayPhaseScreen extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            alivePlayers: this.props.alivePlayers,\n            commonersVictim: '',\n            messageFirstPart: this.setMessageFirstPart(),\n            messageSecondPart: this.setMessageSecondPart()\n        };\n    }\n\n    getAlivePlayersSelect() {\n        let alivePlayers = this.state.alivePlayers;\n\n        let result =\n            <select className=\"field text-select-width\" onChange={this.props.confirmKillSelection}>\n                <option key={\"-1\"} value=\"\">--</option>\n                {alivePlayers.map(name => <option key={name} value={name}>{name}</option>)}\n            </select>;\n\n        return result;\n    }\n\n    setMessageFirstPart() {\n        //console.log(`[DayPhaseScreen][setMessageFirstPart][this.props.wolvesKills]: ${this.props.wolvesKills}`);\n        let numberOfVictims = this.props.wolvesKills === undefined ?\n                                0 :\n                                this.props.wolvesKills.length;\n\n        //console.log(`[DayPhaseScreen][setMessageFirstPart][numberOfVictims]: ${numberOfVictims}`);\n\n        if (numberOfVictims === 0)\n            return 'Nobody';\n\n        else if (numberOfVictims === 1)\n            return `${this.props.wolvesKills[0]}`;\n\n        else\n            return this.props.wolvesKills.join(' and ');\n    }\n\n    setMessageSecondPart() {\n        return this.props.wolvesKills === [] ?\n            \"But you're bad persons, so you have to lynch someone anyway!\" :\n            'But the show must go on! Discuss about who you think did it and pick someone to lynch!';\n    }\n\n    componentWillMount() {\n        if (this.props.gameEnded)\n            this.props.handleCommonersChoice();\n    }\n\n    render() {\n      return (\n        <div className=\"col-xs-12 col-xs-offset-3\">\n            <div className=\"col-xs-4\">\n                <strong>{this.state.messageFirstPart}</strong> died! <br/>{this.state.messageSecondPart}\n            </div>\n            <div className=\"col-xs-5\">\n                {this.getAlivePlayersSelect()}\n            </div>\n            <div className=\"col-xs-2 col-xs-offset-2\">\n                <button className=\"col-xs-5 btn btn-primary top-margin\"\n                        onClick={this.props.handleCommonersChoice}>\n                    Conferma\n                </button>\n            </div>\n        </div>\n      );\n    }\n}\n\nexport default DayPhaseScreen;\n","import React, { Component } from 'react';\nimport Roles from \"./Roles\";\n\nclass EndGame extends Component {\n    render() {\n        let coloredListOfPlayers = [];\n        const roles = new Roles();\n        const allPlayers = this.props.allPlayers;\n\n        for(let i = 0; i < allPlayers.length; i++) {\n            if (!this.props.alivePlayers.includes(allPlayers[i])) continue;\n\n            let playerName = allPlayers[i];\n            let color = this.props.roles[i] === roles.getWolfRole() ?\n                        'text-danger' : 'text-success';\n            coloredListOfPlayers.push(({ name: playerName, textClass: color }));\n        }\n\n        return (\n            <React.Fragment >\n                <div className='jumbotron text-center title top-margin'>{this.props.message}</div>\n                <div className='text-center'>Alive players at the end of the game:\n                    <ul>\n                        {coloredListOfPlayers.map(player => <li key={player.name} className={player.textClass}>{player.name}</li>)}\n                    </ul>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default EndGame;\n","import React, { Component } from 'react';\n\nclass NightSpecialCharacterScreen extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            specialCharacterName: this.getName()\n        };\n    }\n\n    getName() {\n        //console.log(`[getName][alivePlayers]: ${this.props.alivePlayers}`);\n\n        for(let i = 0; i < this.props.playerRoles.length; i++)\n            if (this.props.playerRoles[i] === this.props.specialRole) {\n                //console.log(`[NightGuardPhaseScreen][getName]${this.props.specialRole}: ${this.props.playerNames[i]}`);\n                return this.props.playerNames[i];\n            }\n    }\n\n    isSpecialCharacterAlive() {\n        return this.props.alivePlayers.includes(this.state.specialCharacterName);\n    }\n\n    getPlayersSelect(){\n        let players = this.props.alivePlayers.filter(player => player !== this.state.specialCharacterName);\n\n        let result =\n            <select className='field text-select-width' onChange={this.props.handleSelection}>\n                <option key={'-1'} value=''>--</option>\n                {players.map(name => <option key={name} value={name}>{name}</option>)}\n            </select>;\n\n        return result;\n    }\n\n    componentWillMount(){\n        if (!this.props.isPlaying)\n            this.props.confirmChoice();\n    }\n\n    render() {\n        let character = this.state.specialCharacterName;\n\n        let buttonStyle = this.isSpecialCharacterAlive() ?\n            {marginLeft: '22em', width: '80%'}:\n            {width: '80%'};\n\n        return (\n          <div className=\"col-xs-12 col-xs-offset-3\">\n              <div className=\"col-xs-4\">\n                  {this.isSpecialCharacterAlive() ?\n                      `${this.props.specialRole} ${character}, ${this.props.aliveMessage}` :\n                      `${this.props.specialRole} ${character} is dead, so just pretend you are calling him` }\n              </div>\n              {this.isSpecialCharacterAlive() ?\n                  <div className=\"col-xs-5\">\n                      {this.getPlayersSelect()}\n                  </div> : ''\n              }\n              <div className={this.isSpecialCharacterAlive() ? \"col-xs-2 col-xs-offset-2\" : \"col-xs-2\"}>\n                  <button className=\"col-xs-5 btn btn-primary top-margin right-margin\"\n                          onClick={this.props.confirmChoice}\n                          style={buttonStyle}>\n                      Confirm\n                  </button>\n              </div>\n          </div>\n        )\n    }\n}\n\nexport default NightSpecialCharacterScreen;\n","import React, { Component } from 'react';\n\nclass Phases extends Component {\n    constructor(){\n        super();\n        this.state = {\n            phases: [\n                0,  // Player selection phase\n                1,  // Player names phase\n                2,  // Guard phase\n                3,  // Whore phase\n                4,  // Seer phase\n                5,  // Wolves phase\n                6,  // Day phase\n                7   // End game phase\n            ]\n        };\n    }\n\n    getPhases() {\n        return this.state.phases;\n    }\n\n    getPlayerSelectionPhase() {\n        return this.state.phases.find(phase => phase === 0);\n    }\n\n    getPlayerDataPhase() {\n        return this.state.phases.find(phase => phase === 1);\n    }\n\n    getGuardPhase() {\n        return this.state.phases.find(phase => phase === 2);\n    }\n\n    getWhorePhase() {\n        return this.state.phases.find(phase => phase === 3);\n    }\n\n    getSeerPhase() {\n        return this.state.phases.find(phase => phase === 4);\n    }\n\n    getWolvesPhase() {\n        return this.state.phases.find(phase => phase === 5);\n    }\n\n    getDayPhase() {\n        return this.state.phases.find(phase => phase === 6);\n    }\n\n    getEndGamePhase() {\n        return this.state.phases.find(phase => phase === 7);\n    }\n}\n\nexport default Phases;\n","import React, { Component } from 'react';\nimport Roles from \"./Roles\";\n\nclass NightSeerScreen extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            specialCharacterName: this.getName(),\n            hasYetToChoose: this.props.choice === '',\n            isAlive: this.isSpecialCharacterAlive()\n        };\n    }\n\n    getName() {\n        //console.log(`[getName][alivePlayers]: ${this.props.alivePlayers}`);\n\n        for(let i = 0; i < this.props.playerRoles.length; i++)\n            if (this.props.playerRoles[i] === new Roles().getSeerRole()) {\n                //console.log(`[NightSeerScreen][getName]: ${this.props.playerNames[i]}`);\n                return this.props.playerNames[i];\n            }\n    }\n\n    isSpecialCharacterAlive() {\n        return this.props.alivePlayers.includes(this.getName());\n    }\n\n    getPlayersSelect(){\n        let players = this.props.alivePlayers.filter(player => player !== this.state.specialCharacterName);\n\n        let result =\n            <select className='field text-select-width' onChange={this.props.handleSelection} defaultValue={this.props.choice}>\n                <option key={'-1'} value=''>--</option>\n                {players.map(name => <option key={name} value={name}>{name}</option>)}\n            </select>;\n\n        return result;\n    }\n\n    componentWillMount(){\n        if (!this.props.isPlaying)\n            this.props.continueAction();\n    }\n\n    render() {\n        //console.log('NightSeerScreen render');\n        //console.log(this.props);\n        let character = this.state.specialCharacterName;\n        let isConfirmChoiceButtonDisabled = this.state.hasYetToChoose && this.state.isAlive;\n\n        let buttonStyle = this.state.isAlive ?\n            {marginLeft: '22em', width: '80%'}:\n            {width: '80%'};\n\n        return (\n            <div className=\"col-xs-12 col-xs-offset-3\">\n                <div className=\"col-xs-4\">\n                    {this.state.isAlive ?\n                        `Seer ${character}, pick someone whose identity you wish to know` :\n                        `Seer ${character} is dead, so just pretend you are calling him` }\n                </div>\n                {this.state.isAlive ?\n                    <div className=\"col-xs-5\">\n                        {this.getPlayersSelect()}\n                    </div> : ''\n                }\n\n                <div className={this.state.isAlive ? \"col-xs-2 col-xs-offset-2\" : \"col-xs-2\"}>\n                    <button className={`col-xs-5 btn btn-primary top-margin right-margin ${isConfirmChoiceButtonDisabled ? 'disabled' : ''}`}\n                            onClick={isConfirmChoiceButtonDisabled ? null : this.props.continueAction}\n                            style={buttonStyle}>\n                        Continue\n                    </button>\n\n                    {this.props.confirmChoice === undefined ? '' :\n                        <button className={`col-xs-5 btn btn-success top-margin right-margin ${isConfirmChoiceButtonDisabled ? '' : 'disabled'}`}\n                                onClick={isConfirmChoiceButtonDisabled ? this.props.confirmChoice : null}\n                                style={buttonStyle}>\n                            Confirm\n                        </button>\n                    }\n\n                    {this.state.hasYetToChoose ? '' :\n                        this.props.supplementMessage === true ? <h1>YES</h1> : <h1>NOPE</h1>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NightSeerScreen;\n","import React, { Component } from 'react';\nimport PlayerSelectionScreen from './PlayerSelectionScreen';\nimport PlayerNamesScreen from './PlayerNamesScreen';\nimport ErrorScreen from \"./ErrorScreen\";\nimport Header from \"./Header\";\nimport Roles from \"./Roles\";\nimport NightWolvesPhaseScreen from \"./NightWolvesPhaseScreen\"\nimport DayPhaseScreen from \"./DayPhaseScreen\"\nimport EndGame from \"./EndGame\";\nimport NightSpecialCharacterScreen from \"./NightSpecialCharacterScreen\";\nimport Phases from \"./Phases\";\nimport NightSeerScreen from \"./NightSeerScreen\";\n//import './fonts/glyphicons-halflings-regular.eot';\n\nclass Game extends Component {\n\n    setUpHandlers(){\n        this.resetError = this.resetError.bind(this);\n        this.goToNextPhase = this.goToNextPhase.bind(this);\n        this.goToPreviousPhase = this.goToPreviousPhase.bind(this);\n        this.handleNumberOfPlayersSelection = this.handleNumberOfPlayersSelection.bind(this);\n        this.handleNumberOfPlayersConfirm = this.handleNumberOfPlayersConfirm.bind(this);\n        this.handlePlayerRoleSelection = this.handlePlayerRoleSelection.bind(this);\n        this.handlePlayerNameChange = this.handlePlayerNameChange.bind(this);\n        this.handlePlayerDataConfirm = this.handlePlayerDataConfirm.bind(this);\n        this.confirmKillSelection = this.confirmKillSelection.bind(this);\n        this.handleWolvesChoice = this.handleWolvesChoice.bind(this);\n        this.handleCommonersChoice = this.handleCommonersChoice.bind(this);\n        this.handleGuardSelection = this.handleGuardSelection.bind(this);\n        this.confirmGuardChoice = this.confirmGuardChoice.bind(this);\n        this.handleWhoreSelection= this.handleWhoreSelection.bind(this);\n        this.confirmWhoreChoice = this.confirmWhoreChoice.bind(this);\n        this.handleSeerSelection= this.handleSeerSelection.bind(this);\n        this.confirmSeerChoice = this.confirmSeerChoice.bind(this);\n        this.setRandomRoles = this.setRandomRoles.bind(this);\n    }\n\n    constructor(){\n        super();\n\n        this.state = {\n            roles: new Roles(),\n            phases: new Phases(),\n            currentPhase: 0,\n            selectedNumberOfPlayers: -1,\n            error: false,\n            errorMessage: '',\n            playerNames: [],\n            playerRoles: [],\n            alivePlayers: [],\n            wolvesKills: [],\n            commonersKill: '',\n            guardedPlayer: '',\n            escortedPlayer: '',\n            winnerMessage: '',\n            seerChoice: '',\n            seerMessage: ''\n        };\n\n        this.setUpHandlers();\n    }\n\n    render() {\n        const maxNumberOfPlayers = 12;\n        const headerTitle = 'Welcome to Lupus in Fabula!';\n        let currentPhase = this.state.currentPhase;\n        let roles = this.state.roles;\n        let phases = this.state.phases;\n\n        let returnValue;\n\n        if (this.state.error)\n            returnValue = <ErrorScreen\n                errorMessage={this.state.errorMessage}\n                goBack={this.resetError}\n            />;\n\n        else if (currentPhase === phases.getPlayerSelectionPhase())\n            returnValue = <PlayerSelectionScreen\n                maxPlayers={maxNumberOfPlayers}\n                handleNumberOfPlayersSelection={this.handleNumberOfPlayersSelection}\n                selectedNumberOfPlayers={this.state.selectedNumberOfPlayers}\n                handleNumberOfPlayersConfirm={this.handleNumberOfPlayersConfirm}\n            />;\n\n        else if (currentPhase === phases.getPlayerDataPhase())\n            returnValue = <PlayerNamesScreen\n                selectedNumberOfPlayers={this.state.selectedNumberOfPlayers}\n                goBack={this.goToPreviousPhase}\n                handlePlayerRoleSelection={this.handlePlayerRoleSelection}\n                handlePlayerNameChange={this.handlePlayerNameChange}\n                handlePlayerDataConfirm={this.handlePlayerDataConfirm}\n                playerNames={this.state.playerNames}\n                playerRoles={this.state.playerRoles}\n                setRandomRoles={this.setRandomRoles}\n            />;\n\n        else if (currentPhase === phases.getGuardPhase())\n            returnValue = <NightSpecialCharacterScreen\n                alivePlayers={this.state.alivePlayers}\n                isPlaying={this.isRolePlaying(roles.getGuardRole())}\n                playerNames={this.state.playerNames}\n                playerRoles={this.state.playerRoles}\n                handleSelection={this.handleGuardSelection}\n                confirmChoice={this.isRolePlaying(roles.getGuardRole()) ? this.confirmGuardChoice : this.goToNextPhase}\n                specialRole={this.state.roles.getGuardRole()}\n                aliveMessage={'pick someone to protect'}\n                key={'Guard'}\n            />;\n\n        else if (currentPhase === phases.getWhorePhase())\n            returnValue = <NightSpecialCharacterScreen\n                alivePlayers={this.state.alivePlayers}\n                isPlaying={this.isRolePlaying(roles.getWhoreRole())}\n                playerNames={this.state.playerNames}\n                playerRoles={this.state.playerRoles}\n                handleSelection={this.handleWhoreSelection}\n                confirmChoice={this.isRolePlaying(roles.getWhoreRole()) ? this.confirmWhoreChoice : this.goToNextPhase}\n                specialRole={this.state.roles.getWhoreRole()}\n                aliveMessage={'pick someone to have fun with tonight'}\n                key={'Whore'}\n            />;\n\n        else if (currentPhase === phases.getSeerPhase())\n            returnValue = <NightSeerScreen\n                alivePlayers={this.state.alivePlayers}\n                isPlaying={this.isRolePlaying(roles.getSeerRole())}\n                playerNames={this.state.playerNames}\n                playerRoles={this.state.playerRoles}\n                handleSelection={this.handleSeerSelection}\n                continueAction={this.goToNextPhase}\n                key={this.state.seerMessage}\n                confirmChoice={this.confirmSeerChoice}\n                supplementMessage={this.state.seerMessage}\n                choice={this.state.seerChoice}\n            />;\n\n        else if (currentPhase === phases.getWolvesPhase())\n            returnValue = <NightWolvesPhaseScreen\n                alivePlayers={this.state.alivePlayers}\n                playerRoles={this.state.playerRoles}\n                playerNames={this.state.playerNames}\n                confirmKillSelection={this.confirmKillSelection}\n                handleWolvesChoice={this.handleWolvesChoice}\n            />;\n\n        else if (currentPhase === phases.getDayPhase()) {\n            returnValue = <DayPhaseScreen\n                wolvesKills={this.state.wolvesKills}\n                alivePlayers={this.state.alivePlayers}\n                confirmKillSelection={this.confirmKillSelection}\n                handleCommonersChoice={this.handleCommonersChoice}\n                gameEnded={this.gameEnded(this.state.alivePlayers)}\n            />;\n        }\n\n        else if (currentPhase === phases.getEndGamePhase())\n            returnValue = <EndGame message={this.state.winnerMessage}\n                                   alivePlayers={this.state.alivePlayers}\n                                   allPlayers={this.state.playerNames}\n                                   roles={this.state.playerRoles}/>;\n\n        return (\n            <div className=\"col-xs-12\">\n                <Header title={headerTitle}/>\n                {returnValue}\n            </div>\n        );\n    }\n\n    goToNextPhase() {\n        let currentPhase = this.state.currentPhase;\n        const guardPhase = this.state.phases.getGuardPhase();\n        const dayPhase = this.state.phases.getDayPhase();\n\n        if (currentPhase === dayPhase && !this.gameEnded(this.state.alivePlayers)) {\n            this.setState({currentPhase: guardPhase});\n            return;\n        }\n\n        this.setState({currentPhase: currentPhase + 1});\n    }\n\n    goToPreviousPhase() {\n        let currentPhase = this.state.currentPhase;\n        this.setState({currentPhase: currentPhase - 1});\n    }\n\n    isRolePlaying(role) {\n        return this.getNumberOfPlayersWithRole(role) > 0;\n    }\n\n    resetError(){\n        //console.log(`Resetting error`);\n        this.setState({\n            error: false,\n            errorMessage: ''\n        });\n    }\n\n    handleNumberOfPlayersSelection(event){\n        this.setState({ selectedNumberOfPlayers: event.target.value });\n        this.initializePlayerFields(event.target.value);\n    }\n\n    handleNumberOfPlayersConfirm(){\n        //console.log(`Number of players: ${this.state.selectedNumberOfPlayers}`);\n        if (this.state.selectedNumberOfPlayers >= 6)\n            this.goToNextPhase();\n        else\n            this.setErrorMessage('Select a proper number of players!');\n    }\n\n    handlePlayerRoleSelection(event){\n        let newRoles = this.state.playerRoles;\n        let selectedRole = event.target.value;\n        let position = event.target.id.split('-')[1];\n\n        newRoles[position] = selectedRole;\n\n        this.setState({ playerRoles: newRoles });\n    }\n\n    setRandomRoles() {\n        const roles = this.state.roles;\n        let newRoles = this.state.playerRoles;\n        const numberOfPlayers = this.state.selectedNumberOfPlayers;\n\n        const maxNumberOfWolves = roles.getMaxNumberOfWolves(numberOfPlayers);\n        const maxNumberOfGuard = roles.getMaxNumberOfGuards(numberOfPlayers);\n        const maxNumberOfWhores = roles.getMaxNumberOfWhores(numberOfPlayers);\n        const maxNumberOfSeers = roles.getMaxNumberOfSeers(numberOfPlayers);\n        const maxNumberOfCommoners = roles.getMaxNumberOfCommoners(numberOfPlayers);\n        const maxNumberOfPossessed = roles.getMaxNumberOfPossessed(numberOfPlayers);\n\n        this.removeDefaultCommonerRole(newRoles);\n\n        //console.log(newRoles);\n\n        for (let i = 0; i < numberOfPlayers; i++) {\n            let remainingRolesToAssign = [];\n\n            let currentNumberOfWolves = this.getNumberOfPlayersWithRole(roles.getWolfRole(), newRoles);\n            let currentNumberOfGuards = this.getNumberOfPlayersWithRole(roles.getGuardRole(), newRoles);\n            let currentNumberOfWhores = this.getNumberOfPlayersWithRole(roles.getWhoreRole(), newRoles);\n            let currentNumberOfCommoners = this.getNumberOfPlayersWithRole(roles.getDefaultRole(), newRoles);\n            let currentNumberOfSeers = this.getNumberOfPlayersWithRole(roles.getSeerRole(), newRoles);\n            let currentNumberOfPossessed = this.getNumberOfPlayersWithRole(roles.getPossessedRole(), newRoles);\n\n            this.addRoles(maxNumberOfWolves - currentNumberOfWolves, remainingRolesToAssign, roles.getWolfRole());\n            this.addRoles(maxNumberOfGuard - currentNumberOfGuards, remainingRolesToAssign, roles.getGuardRole());\n            this.addRoles(maxNumberOfWhores - currentNumberOfWhores, remainingRolesToAssign, roles.getWhoreRole());\n            this.addRoles(maxNumberOfCommoners - currentNumberOfCommoners, remainingRolesToAssign, roles.getDefaultRole());\n            this.addRoles(maxNumberOfSeers - currentNumberOfSeers, remainingRolesToAssign, roles.getSeerRole());\n            this.addRoles(maxNumberOfPossessed - currentNumberOfPossessed, remainingRolesToAssign, roles.getPossessedRole());\n\n            newRoles[i] = remainingRolesToAssign[Math.floor(Math.random() * remainingRolesToAssign.length)];\n        }\n\n        //console.log(newRoles);\n        this.setState({ playerRoles: newRoles });\n    }\n\n    getNumberOfPlayersWithRole(roleToGet, currentRoles) {\n        currentRoles = currentRoles === undefined ?\n                        this.state.playerRoles :\n                        currentRoles;\n\n        return currentRoles.filter(role => role === roleToGet).length;\n    }\n\n    addRoles(numberOfTimesToAdd, remainingRolesToAssign, role) {\n        for (let i = 0; i < numberOfTimesToAdd; i++)\n            remainingRolesToAssign.push(role);\n    }\n\n    handlePlayerNameChange(event){\n        let newNames = this.state.playerNames;\n        let position = event.target.id.split('-')[1];\n\n        newNames[position] = event.target.value;\n\n        this.setState({ playerNames: newNames });\n    }\n\n    handlePlayerDataConfirm(){\n        if (!this.dataAreValid())\n            return;\n\n        let alivePlayers = this.state.playerNames;\n        this.setState({alivePlayers: alivePlayers});\n\n        this.goToNextPhase();\n    }\n\n    dataAreValid() {\n        return this.isNumberOfWolvesAcceptable() &&\n            this.allPlayersHaveNames() &&\n            this.allNamesAreUnique() &&\n            this.uniqueRolesAreReallyUnique();\n    }\n\n    confirmKillSelection(event){\n        //console.log(`[${event.target.value}] has been chosen as victim`);\n        let newVictims = this.state.wolvesKills;\n\n        if (this.isUndefinedOrEmpty(event.target.value))\n            newVictims = [];\n        else\n            newVictims.push(event.target.value);\n\n        if (this.state.currentPhase === this.state.phases.getWolvesPhase())\n            this.setState({\n                wolvesKills: newVictims,\n                commonersKill: ''\n            });\n\n        else if (this.state.currentPhase === this.state.phases.getDayPhase())\n            this.setState({\n                commonersKill: event.target.value,\n                wolvesKills: [],\n                guardedPlayer: '',\n                escortedPlayer: '',\n                seerMessage: '',\n                seerChoice: ''\n            });\n    }\n\n    handleWolvesChoice(){\n        let victims = this.state.wolvesKills;\n        if (!this.areVictimsValid(victims)) {\n            return;\n        }\n\n        if (!this.doVictimsDie(victims)) {\n            this.goToNextPhase();\n            return;\n        }\n\n        //console.log(`Set ${victims.join()} as wolves' choice`);\n        const alivePlayers = this.removeFromAlivePlayers(victims);\n\n        //console.log(`[handleWolvesChoice] alivePlayers: ${alivePlayers}`);\n\n        let winners = this.gameEnded(alivePlayers);\n\n        if (winners)\n            this.goToEndGameScreen(winners);\n        else\n            this.goToNextPhase();\n    }\n\n    handleCommonersChoice(){\n        const victim = this.state.commonersKill;\n        //console.log(`Set ${victim} as commoners' choice`);\n\n        if (!this.areVictimsValid(victim))\n            return;\n\n        const alivePlayers = this.removeFromAlivePlayers(victim);\n\n        let winners = this.gameEnded(alivePlayers);\n\n        if (winners)\n            this.goToEndGameScreen(winners);\n        else {\n            this.setState({ wolvesKills: [] });\n            this.goToNextPhase();\n        }\n    }\n\n    setErrorMessage(message){\n        //console.log(`Setting error to: ${message}`);\n        this.setState({\n            error: true,\n            errorMessage: message\n        });\n    }\n\n    initializePlayerFields(numberOfPlayers){\n        let tempNames = this.state.playerNames;\n        let tempRoles = this.state.playerRoles;\n\n        if (tempRoles.length === 0)\n            for (let i = 0; i < numberOfPlayers; i++)\n                tempRoles.push(this.state.roles.getDefaultRole());\n\n        this.resetDataForPlayersNonExistentAnymore(numberOfPlayers, tempNames, tempRoles);\n\n        this.setState({ playerNames: tempNames });\n        this.setState({ playerRoles: tempRoles });\n    }\n\n    resetDataForPlayersNonExistentAnymore(numberOfPlayers, tempNames, tempRoles) {\n        if (this.state.playerRoles.length > numberOfPlayers) {\n            for (let i = numberOfPlayers; i < this.state.playerRoles.length; i++) {\n                tempNames.pop();\n                tempRoles.pop();\n            }\n        }\n    }\n\n    allNamesAreUnique(){\n        let names = this.state.playerNames;\n\n        for(let i = 0; i < names.length; i++) {\n            if(names.filter(item => item !== names[i]).length <= (names.length - 2)) {\n                this.setErrorMessage('All players must have a unique name');\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isNumberOfWolvesAcceptable(){\n        let wolves = 0;\n        const maxNumberOfWolves = this.state.roles.getMaxNumberOfWolves(this.state.selectedNumberOfPlayers);\n\n        for(let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\n            if (this.state.playerRoles[i] === this.state.roles.getRoleByName('wolf'))\n                wolves++;\n        }\n\n        if (wolves === 0) {\n            this.setErrorMessage('At least a wolf has to be present');\n            return false;\n        }\n\n        if (wolves > maxNumberOfWolves) {\n            this.setErrorMessage('There are too many wolves for the number of players selected');\n            return false;\n        }\n\n        return true;\n    }\n\n    allPlayersHaveNames() {\n        if (this.state.playerNames.length === 0) {\n            this.setErrorMessage('All players must have a name');\n            return false;\n        }\n\n        for(let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\n            if (this.isUndefinedOrEmpty(this.state.playerNames[i])) {\n                this.setErrorMessage('All players must have a name!');\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    uniqueRolesAreReallyUnique() {\n        let guards = this.getAlivePlayersByRole(this.state.playerNames, this.state.roles.getGuardRole()).length;\n        let whores = this.getAlivePlayersByRole(this.state.playerNames, this.state.roles.getWhoreRole()).length;\n        let seers = this.getAlivePlayersByRole(this.state.playerNames, this.state.roles.getSeerRole()).length;\n\n        if (guards > 1) {\n            this.setErrorMessage(`Only a player can play as the ${this.state.roles.getGuardRole().toLowerCase()}!`);\n            return false;\n        }\n\n        if (whores > 1) {\n            this.setErrorMessage(`Only a player can play as the ${this.state.roles.getWhoreRole().toLowerCase()}!`);\n            return false;\n        }\n\n        if (seers > 1) {\n            this.setErrorMessage(`Only a player can play as the ${this.state.roles.getSeerRole().toLowerCase()}!`);\n            return false;\n        }\n\n        return true;\n    }\n\n    areVictimsValid(victims){\n        //console.log(`isVictimValid: chosen victim ${victims}`);\n        if (this.isUndefinedOrEmpty(victims)) {\n            this.setErrorMessage('Select a valid victim!');\n            return false;\n        }\n\n        return true;\n    }\n\n    doVictimsDie(victims){\n        //console.log(`areVictimsValid: chosen victim ${victim}`);\n\n        // TODO ampliare quando ci saranno altri ruoli\n\n        if (victims.includes(this.state.guardedPlayer)) {\n            this.setState({wolvesKills: []});\n            return false;\n        }\n\n        let whore = this.getAlivePlayersByRole(this.state.alivePlayers, this.state.roles.getWhoreRole())[0];\n        let wolves = this.getAlivePlayersByRole(this.state.alivePlayers, this.state.roles.getWolfRole());\n\n        if (victims.includes(whore)) {\n            this.setState({ wolvesKills: [] });\n            return false;\n        }\n\n        this.killWhoreIfSheSleptWithWolf(wolves, whore);\n        this.killAlsoWhoreIfEscortedPlayerIsBetweenVictims(victims, whore);\n\n        return true;\n    }\n\n    removeFromAlivePlayers(victims) {\n        //console.log(`[removeFromAlivePlayers][victims]: ${victims}`);\n        //console.log(`[removeFromAlivePlayers][victims.length]: ${victims.length}`);\n        //console.log(`[removeFromAlivePlayers][this.state.alivePlayers]: ${this.state.alivePlayers}`);\n\n        let alivePlayers = this.state.alivePlayers.filter(name => !victims.includes(name));\n\n        //console.log(`[removeFromAlivePlayers][alivePlayers]: ${alivePlayers}`);\n\n        this.setState({alivePlayers: alivePlayers});\n        return alivePlayers;\n    }\n\n    gameEnded(alivePlayers) {\n        if (this.wolvesHaveWon(alivePlayers))\n            return 'Wolves';\n        if (this.commonersHaveWon(alivePlayers))\n            return 'Commoners';\n\n        return false;\n    }\n\n    goToEndGameScreen(winners) {\n        //console.log(`*** CONGRATULATIONS ${winners}! ***`);\n        this.setWinnerMessage(winners);\n        this.setState({currentPhase: this.state.phases.getEndGamePhase()});\n    }\n\n    handleGuardSelection(event) {\n        //console.log(`[handleGuardSelection][guardedPlayer]: ${event.target.value}`);\n        this.setState({guardedPlayer: event.target.value});\n    }\n\n    confirmGuardChoice() {\n        if (this.isUndefinedOrEmpty(this.state.guardedPlayer) &&\n        this.getAlivePlayersByRole(this.state.alivePlayers, this.state.roles.getGuardRole()).length > 0) {\n            this.setErrorMessage('Select a player!');\n            return false;\n        }\n\n        this.goToNextPhase();\n    }\n\n    handleWhoreSelection(event) {\n        //console.log(`[handleWhoreSelection][escortedPlayer]: ${event.target.value}`);\n        this.setState({escortedPlayer: event.target.value});\n    }\n\n    confirmWhoreChoice() {\n        if (this.isUndefinedOrEmpty(this.state.escortedPlayer) &&\n        this.getAlivePlayersByRole(this.state.alivePlayers, this.state.roles.getWhoreRole()).length > 0) {\n            this.setErrorMessage('Select a player!');\n            return false;\n        }\n\n        this.goToNextPhase();\n    }\n\n    confirmSeerChoice() {\n        if (this.isUndefinedOrEmpty(this.state.seerChoice) &&\n        this.getAlivePlayersByRole(this.state.alivePlayers, this.state.roles.getSeerRole()).length > 0) {\n            this.setErrorMessage('Select a player!');\n            return false;\n        }\n\n        let chosenIsWolf = this.getAlivePlayersByRole(this.state.alivePlayers, this.state.roles.getWolfRole()).includes(this.state.seerChoice);\n\n        this.setState({ seerMessage: chosenIsWolf });\n    }\n\n    handleSeerSelection(event) {\n        this.setState({seerChoice: event.target.value});\n    }\n\n    wolvesHaveWon(alivePlayers) {\n        let wolves = this.getWolvesSide(alivePlayers);\n        let commoners = this.getCommonersSide(alivePlayers);\n\n        //console.log(`Wolves: ${wolves}`);\n        //console.log(`Commoners: ${commoners}`);\n\n        return wolves.length >= commoners.length;\n    }\n\n    getAlivePlayersByRole(alivePlayers, role) {\n        let result = [];\n\n        for(let i = 0; i < this.state.playerRoles.length; i++)\n            if (this.state.playerRoles[i] === role && alivePlayers.includes(this.state.playerNames[i]))\n                result.push(this.state.playerNames[i]);\n\n        return result;\n    }\n\n    getCommonersSide(alivePlayers) {\n        // TODO Ampliare questa, se serve, ogni volta che si aggiunge un ruolo\n\n        const commonerRole = this.state.roles.getDefaultRole();\n        const guardRole = this.state.roles.getGuardRole();\n        const whoreRole = this.state.roles.getWhoreRole();\n        const seerRole = this.state.roles.getSeerRole();\n        const possessedRole = this.state.roles.getPossessedRole();\n\n        return this.getAlivePlayersByRole(alivePlayers, commonerRole)\n                   .concat(this.getAlivePlayersByRole(alivePlayers, guardRole))\n                   .concat(this.getAlivePlayersByRole(alivePlayers, whoreRole))\n                   .concat(this.getAlivePlayersByRole(alivePlayers, possessedRole))\n                   .concat(this.getAlivePlayersByRole(alivePlayers, seerRole));\n    }\n\n    getWolvesSide(alivePlayers) {\n        // TODO Ampliare questa, se serve, ogni volta che si aggiunge un ruolo\n\n        const wolfRole = this.state.roles.getWolfRole();\n\n        return this.getAlivePlayersByRole(alivePlayers, wolfRole);\n    }\n\n    commonersHaveWon(alivePlayers) {\n        let goodGuys = this.getCommonersSide(alivePlayers);\n\n        //console.log(`[commonersHaveWon][goodGuys]: ${goodGuys}`);\n\n        return this.arrayAreEqual(alivePlayers, goodGuys);\n    }\n\n    setWinnerMessage(winner){\n        const winnerMessage = `${winner} have won!`;\n        this.setState({winnerMessage: winnerMessage});\n    }\n\n    arrayAreEqual(a1, a2) {\n        return a1.length === a2.length &&\n            a1.every(element => a2.includes(element));\n    }\n\n    removeDefaultCommonerRole(newPlayerRoles) {\n        for (let i = 0; i < newPlayerRoles.length; i++)\n            newPlayerRoles[i] = '';\n    }\n\n    isUndefinedOrEmpty(object) {\n        //console.log(`[isUndefinedOrEmpty]: [${object}]`);\n        return object === undefined ||\n               object === null ||\n               object === '' ||\n               object === [] ||\n               object.length === 0;\n    }\n\n\n    killAlsoWhoreIfEscortedPlayerIsBetweenVictims(victims, whore) {\n        if (victims.includes(this.state.escortedPlayer)) {\n            //console.log(`[isVictimValid][Adding to wolvesKills]: ${whore}`);\n            let newVictims = this.state.wolvesKills;\n            newVictims.push(whore);\n\n            this.setState({wolvesKills: newVictims});\n        }\n    }\n\n    killWhoreIfSheSleptWithWolf(wolves, whore) {\n        if (wolves.includes(this.state.escortedPlayer)) {\n            //console.log(`[isVictimValid][Adding to wolvesKills]: ${whore}`);\n            let newVictims = this.state.wolvesKills;\n            newVictims.push(whore);\n\n            this.setState({wolvesKills: newVictims});\n        }\n    }\n}\n\nexport default Game;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/App.css';\nimport './css/bootstrap.min.css';\nimport Game from './Components/App';\nimport registerServiceWorker from './scripts/registerServiceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}